script;
dep field64;

use field64::{Fe, fe_add, fe_mul, fe_sub};
use std::u256::U256;

fn main() {
  // test_fe_add();
  // test_fe_sub();
  // test_fe_mul();
}

fn assert_eq_fe(a: Fe, b: Fe) {
  assert(a.ls[0] == b.ls[0]);
  assert(a.ls[1] == b.ls[1]);
  assert(a.ls[2] == b.ls[2]);
  assert(a.ls[3] == b.ls[3]);
}

fn log_fe(a: Fe) {
  log(a.ls[0]);
  log(a.ls[1]);
  log(a.ls[2]);
  log(a.ls[3]);
}


#[test]
fn test_fe_add() {
  let a = Fe{ ls: [1,1,1,1] };
  let b = Fe{ ls: [1,1,1,1] };
  let res = fe_add(a, b);
  assert_eq_fe(res, Fe { ls: [2,2,2,2]});

  // modulus + 1
  let res_2 = fe_add(Fe{ls: [0xffffffff00000001,0x0000000000000000,0x00000000ffffffff,0xffffffffffffffff]}, Fe{ls:[0,0,0,1]});
  assert_eq_fe(res_2, Fe { ls: [0,0,0,1]});

  // modulus + [1,0,0,1]
  let res_3 = fe_add(Fe{ls: [0xffffffff00000001,0x0000000000000000,0x00000000ffffffff,0xffffffffffffffff]}, Fe{ls:[1,0,0,1]});
  assert_eq_fe(res_3, Fe{ls: [1,0,0,1]});

  // should give the same result als res_3
  let res_4 = fe_add(Fe{ls: [1,0,0x00000000ffffffff,0xffffffffffffffff]}, Fe{ls:[0xffffffff00000001,0,0,1]});
  assert_eq_fe(res_4, Fe{ls: [1,0,0,1]});
  //modulus-1 + 2
  let a = Fe{ls: [18446744069414584321, 0, 4294967295, 18446744073709551614]};
  let b = Fe{ls: [0,0,0,2]};
  assert_eq_fe(fe_add(a,b), Fe{ls:[0,0,0,1]});
  // a = 6024032581487054615307857608562388818842860057096001857409703737786438595508
  let a: Fe = Fe{ls: [10598342506117936052, 6743270311476307786, 2169871353760194456, 959683757796537189]};
  // b = 25418630993729383971986686872773164063098134863541517897062074512015245746419
  let b: Fe = Fe{ls: [4063307077606482163, 8614063320694916486, 5278298332222909972, 4049421542817092888]};
  // 2a mod p = 12048065162974109230615715217124777637685720114192003714819407475572877191016
  let result: Fe = Fe{ls: [2749940938526320488, 13486540622952615573, 4339742707520388912, 1919367515593074378]};
  // a + b mod p = 31442663575216438587294544481335552881940994920637519754471778249801684341927
  let Result_two = Fe {ls: [14661649583724418215, 15357333632171224272, 7448169685983104428, 5009105300613630077]};
  assert_eq_fe(fe_add(a,a), result);
  assert_eq_fe(fe_add(a,b), Result_two);
}

#[test]
fn test_fe_sub() {
  // a = 6024032581487054615307857608562388818842860057096001857409703737786438595508
  let a: Fe = Fe{ls: [10598342506117936052, 6743270311476307786, 2169871353760194456, 959683757796537189]};
  // b = 25418630993729383971986686872773164063098134863541517897062074512015245746419
  let b: Fe = Fe{ls: [4063307077606482163, 8614063320694916486, 5278298332222909972, 4049421542817092888]};

  // a - b mod p = 96397490798113919406018617685196798285830868608844798155881260534638290703040
  let res: Fe = Fe{ls: [6535035428511453888, 16575951068785910212, 15338317095246836099, 15357006284394028621]};

  // assert_eq_fe(fe_sub(a,a), Fe{ls:[0,0,0,0]});

  let sum = fe_sub(a,b);
  log_fe(sum); 
  assert_eq_fe(sum, res);

}

#[test]
fn test_fe_mul() {
  // let a = Fe{ ls: [1,1,1,1] };
  // let b = Fe{ ls: [1,0,0,0] };
  // let res = fe_mul(a, b);
  // log_fe(res);
  // assert_eq_fe(res, a);

  // a = 6024032581487054615307857608562388818842860057096001857409703737786438595508
  let a: Fe = Fe{ls: [10598342506117936052, 6743270311476307786, 2169871353760194456, 959683757796537189]};
  // b = 25418630993729383971986686872773164063098134863541517897062074512015245746419
  let b: Fe = Fe{ls: [4063307077606482163, 8614063320694916486, 5278298332222909972, 4049421542817092888]};
  // ab mod p = 108241981176406534212499959293904255217097041836005985066581592441476645631991
  let result = Fe{ ls: [8423263767409702903, 9986490194714520553, 15514995372736916253, 17243942465708441057]};
  // log_fe(fe_mul(a,b));
  assert_eq_fe(fe_mul(a, b), result);
}
