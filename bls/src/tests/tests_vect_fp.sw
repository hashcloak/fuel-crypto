library tests_vect_fp;

use ::fields::*;
use ::vect::*;
use ::test_helpers::*;

use std::assert::assert;

pub fn fp_tests() -> bool {
    // Don't run all tests at the same time...

    // assert(test_add_fp());
    // assert(test_sub_fp());
    // assert(tests_mul_by_3_fp());
    // assert(tests_mul_by_8_fp());
    assert(test_lshift_p());

    true
}

fn test_add_fp() -> bool {
    assert(test_add_zero_to_zero());
    assert(test_add_zero_to_random());
    assert(test_add_random_to_zero());
    assert(test_add_random_to_small());
    assert(test_add_larger_than_p());
    assert(test_add_2_randoms());
    true
}

fn test_add_zero_to_zero() -> bool {
    let res: vec384 = add_fp(ZERO, ZERO);
    equals_vec384(res, ZERO);
    true
}

fn test_add_zero_to_random() -> bool {
    let random = vec384 {
        ls: [0x3e2528903ca1ef86,
        0x270fd67a03bf9e0a, 0xdc70c19599cb699e, 0xebefda8057d5747a, 0xcf20e11f0b1c323, 0xe979cbf960fe51d]
    };
    let res: vec384 = add_fp(random, ZERO);
    equals_vec384(res, random);
    true
}

fn test_add_random_to_zero() -> bool {
    let random = vec384 {
        ls: [0x3e2528903ca1ef86,
        0x270fd67a03bf9e0a, 0xdc70c19599cb699e, 0xebefda8057d5747a, 0xcf20e11f0b1c323, 0xe979cbf960fe51d]
    };
    /*
4478030004447473542
2814704111667093002
15884408734010272158
17001047363111187578
932823543034528547
1051481384684610845
    */
    let res: vec384 = add_fp(ZERO, random);
    equals_vec384(res, random);
    true
}

fn test_add_random_to_small() -> bool {
    let small = vec384 {
        ls: [0x1,
        0x2, 0x3, 0x4, 0x5, 0x6]
    };
    let random = vec384 {
        ls: [0x3e2528903ca1ef86,
        0x270fd67a03bf9e0a, 0xdc70c19599cb699e, 0xebefda8057d5747a, 0xcf20e11f0b1c323, 0xe979cbf960fe51d]
    };
    let res: vec384 = add_fp(small, random);
    equals_vec384(res, vec384 {
        ls: [4478030004447473543, 2814704111667093004, 15884408734010272161, 17001047363111187582, 932823543034528552, 1051481384684610851]
    });
    true
}

fn test_add_larger_than_p() -> bool {
    /*
    4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272559700
    +
    100
    is a little bit larger than p
    */
    //[13402431016077863508, 2210141511517208575, 7435674573564081700, 7239337960414712511, 5412103778470702295, 1873798617647539866]
    let a = vec384 {
        ls: [13402431016077863508,
        2210141511517208575, 7435674573564081700, 7239337960414712511, 5412103778470702295, 1873798617647539866]
    };

    let b = vec384 {
        ls: [100,
        0, 0, 0, 0, 0]
    };

    // should be 13
    let res: vec384 = add_fp(a, b);
    equals_vec384(res, vec384 {
        ls: [13, 0, 0, 0, 0, 0]
    });
    true
}

fn test_add_2_randoms() -> bool {
    //[4510245898505151773, 8849327944066866226, 11451510199254766964, 782624411996506985, 9666712539018543006, 17492304704872943]
    let random_1 = vec384 {
        ls: [4510245898505151773,
        8849327944066866226, 11451510199254766964, 782624411996506985, 9666712539018543006, 17492304704872943]
    };

    //[8877477209635348035, 16708328088811667500, 14014037299927741552, 1795070958963053268, 10606788931721547929, 841903545056265961]
    let random_2 = vec384 {
        ls: [8877477209635348035,
        16708328088811667500, 14014037299927741552, 1795070958963053268, 10606788931721547929, 841903545056265961]
    };
    /*
a=37363336077986948456666213736586466128287562369519105825429602984091321919274233302919361890839579644111801541917
b=1798295057736039902482424641059918570220554796267905001254827923367760771974871956830417883729301310309317980773955
a+b=1835658393814026850939090854796505036348842358637424107080257526351852093894146190133337245620140889953429782315872
[13387723108140499808, 
7110911959168982110, 
7018803425472956901, 
2577695370959560254, 
1826757397030539319, 
859395849761138905]

a+b< p is true
*/
    let res: vec384 = add_fp(random_1, random_2);
    equals_vec384(res, vec384 {
        ls: [13387723108140499808, 7110911959168982110, 7018803425472956901, 2577695370959560254, 1826757397030539319, 859395849761138905]
    });
    true
}

fn tests_mul_by_3_fp() -> bool {
    //3*0=0
    let three_times_0 = mul_by_3_fp(ZERO);
    equals_vec384(three_times_0, ZERO);

    // 3311078190518289289936277681023239947232202294966126226561271980448667165835391482457451698237502148041582301891462
    let a = vec384 {
        ls: [5598198260030196614,
        9227139175563025534, 12721729458998794199, 15322498199590564519, 14360971206699872851, 1550139647308650475]
    };
    // a*3 mod p should be
    //1928415461111533082973253391597911528582841245020362909019699669097938196524498718486979836454475116048958360554812
    let res = mul_by_3_fp(a);
    equals_vec384(res, vec384 {
        ls: [8436476821644414268, 4814390429945107835, 4847095156158667582, 13042074604232716920, 13811961989448662348, 902821706630871694]
    });
    true
}

fn tests_mul_by_8_fp() -> bool {
    //8*0=0
    let eight_times_0 = mul_by_8_fp(ZERO);
    equals_vec384(eight_times_0, ZERO);

    // 2157040060242996582487091204805473379530946954236593619635912200349069530691884182763342898014216243417047961230344
    let a = vec384 {
        ls: [4748578380656466952,
        10419428663092908236, 18363049814497995794, 10615108747081361673, 10405771956295193853, 1009856344616347211]
    };
    // a*8 mod p should be
    //1246682261057303086225570335500170410020044354136717415759065058296429643571722004335992667597667291184806599603604
    let res = mul_by_8_fp(a);
    equals_vec384(res, vec384 {
        ls: [2825647054649832852, 727886963836225123, 6481235779470329860, 623285913863388498, 6257528315350086799, 583656286340618227]
    });
    true
}

fn test_lshift_p() -> bool {
    assert(test_1_lshift_p());
    assert(test_250_lshift_p());
    true
}

fn test_1_lshift_p() -> bool {
    //1281534117852017820269267861584320258656990227317793864009951923807317297699607442944495077621627898376663719366433
    //[13059245463466299169, 17774603101077980186, 889990675562875390, 12771390643166271294, 5370893444473505192, 599972797727911687]
    let r = vec384 {
        ls: [13059245463466299169,
        17774603101077980186, 889990675562875390, 12771390643166271294, 5370893444473505192, 599972797727911687]
    };
    let res = lshift_fp(r, 1);
    // 1 leftshift is *2
    //2563068235704035640538535723168640517313980454635587728019903847614634595399214885888990155243255796753327438732866
    equals_vec384(res, vec384 {
        ls: [7671746853223046722, 17102462128446408757, 1779981351125750781, 7096037212622990972, 10741786888947010385, 1199945595455823374]
    });
    true
}

fn test_250_lshift_p() -> bool {
    //3801089353888592548165443178944616809833017335235566378191862939584686528734180895181864917846967916907395374952420
    let a = vec384 {
        ls: [13749239540608708580,
        16959468157877110068, 1567469580365175571, 14160078721051372203, 9626163454156242266, 1779547015017246937]
    };
    // leftshift 250 mod p
    //879994519659111629345302542423123869141449003108211674743509876497540102414622865945836408424086377077979782833710
    let res = lshift_fp(a, 250);
    equals_vec384(res, vec384 {
        ls: [13113011510218319406, 16706544215516829647, 7984223107370075095, 1162337285386263785, 307447685117845313, 411984953494678179]
    });
    true
}
