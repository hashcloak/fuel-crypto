library tests_temp_mul;

use ::vect::*;
use std::{assert::assert, vec::Vec};
use ::test_helpers::*;

pub fn tests_temp_mul() -> bool {
    assert(test_mul_temp_by_2());
    true
}

fn test_temp_mul_random_by_random() -> bool {
    let mut p_vec = ~Vec::new::<u64>();
    p_vec.push(0xb9feffffffffaaab);
    p_vec.push(0x1eabfffeb153ffff);
    p_vec.push(0x6730d2a0f6b0f624);
    p_vec.push(0x64774b84f38512bf);
    p_vec.push(0x4b1ba7b6434bacd7);
    p_vec.push(0x1a0111ea397fe69a);
    
    //28700440645560700010247999350858186656965165501286811298915027297835050275063552879691348405696442872566701753802544
    let mut r1_vec = ~Vec::new::<u64>();
    r1_vec.push(6071868568151433008);
    r1_vec.push(12105094901188801210);
    r1_vec.push(2389211775905699303);
    r1_vec.push(7838417195104481535);
    r1_vec.push(5826366508043997497);
    r1_vec.push(13436617433956842131);
    //845585313160814446158446407435059620350609671735802091463220815564059525214346533476776130630310896229502998576879
    let mut r2_vec = ~Vec::new::<u64>();
    r2_vec.push(16964885827015180015);
    r2_vec.push(12035734743809705289);
    r2_vec.push(10517060043363161601);
    r2_vec.push(1119606639881808286);
    r2_vec.push(2211903887497377980);
    r2_vec.push(395875676649998273);

    //1128153310087946582770541547041113021655162062067663357733024411531633319713239944238808860915038256082620363451095
    //12684677789208411253122026388948849483224138949631185589801456383786133679073
    let res_vec = vec384 {
        ls: [4793585148327242455, 2837967030551533581, 1626660158106644623, 15384342728939744618, 1826521055323312182, 528164867630647501]
    };
    // let mut res_vec = ~Vec::new::<u64>();
    // res_vec.push(0x42863c4b7ea22ad7);//4793585148327242455
    // res_vec.push(0x27627bfa644b580d);//2837967030551533581
    // res_vec.push(0x16930ecb9e3a308f);//1626660158106644623
    // res_vec.push(0xd5802a33c5512d6a);//15384342728939744618
    // res_vec.push(0x19591b38f5515036);//1826521055323312182
    // res_vec.push(0x7546b2615f748cd);//528164867630647501

    let res = mul_temp(r1_vec, r2_vec, p_vec, 6);
    print_vec384(res);
/*
16484308011771146774 + 
12795119582497094196 * 2^64 +
7495239071060242083 * 2^128 +
6228288009955243706 * 2^192 +
334445847756758381 * 2^256 +
1343304342180463133 * 2^320

16484308011771146774 + 12795119582497094196 * 2**64 +7495239071060242083 * 2**128 +6228288009955243706 * 2**192 +334445847756758381 * 2**256 +1343304342180463133 * 2**320
=
2869280660193735394861207574210601737447645641788161081095242677999752664315845687657572464353026167520041778459158
Same result as zkcrypto!

and this is not the same result as blst
*/
    // equals_vec384(res, res_vec);
    
    true
}

fn test_mul_temp_by_2() -> bool {
    let mut p_vec = ~Vec::new::<u64>();
    p_vec.push(0xb9feffffffffaaab);
    p_vec.push(0x1eabfffeb153ffff);
    p_vec.push(0x6730d2a0f6b0f624);
    p_vec.push(0x64774b84f38512bf);
    p_vec.push(0x4b1ba7b6434bacd7);
    p_vec.push(0x1a0111ea397fe69a);
    
    //2367106380816923637832389518823092703674202766714323478820851269126356623723913304989534316437425836090100832620729
    //[9172416622910853305, 14987574562624449790, 13213778230238218784, 
    //15872153713916140599, 9712154313263354644, 1108202597211161767]
    let mut r1_vec = ~Vec::new::<u64>();
    r1_vec.push(9172416622910853305);
    r1_vec.push(14987574562624449790);
    r1_vec.push(13213778230238218784);
    r1_vec.push(15872153713916140599);
    r1_vec.push(9712154313263354644);
    r1_vec.push(1108202597211161767);

    let mut vec_2 = ~Vec::new::<u64>();
    vec_2.push(2);
    vec_2.push(0);
    vec_2.push(0);
    vec_2.push(0);
    vec_2.push(0);
    vec_2.push(0);

//731803206412179882246989211910281250791522713489639072309644402128681596956988745536381003745836008142307392681671
//[4942402229743843015, 9318263540022139389, 545137813202804253, 
//6058225393708017072, 14012204848056006994, 342606576774783668]
    let res = mul_temp(r1_vec, vec_2, p_vec, 6);
    print_vec384(res);
    /*
    11360606136736300744
    10320420748134520786
    17912563010296520217
    16145629554006184624
    12933232110729028586
    1518885514198738558
    Same result as zkcrypto!

    */
    true
}