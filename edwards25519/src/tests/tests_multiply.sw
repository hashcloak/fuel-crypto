library tests_multiply;

use ::field_element::*;
use std::assert::assert;
use ::test_helpers::*;

pub fn tests_multiply() -> bool {
    // assert(test_multiply_by_0());
    // assert(test_multiply_1_by_1());
    // assert(test_multiply_by_1_small());
    // assert(test_multiply_by_1_large());
    // assert(test_multiply_small_elms());
    // assert(test_multiply_small_elms_2());
    // assert(test_multiply_small_elms_3());
    assert(test_multiply_elms_4());
    // assert(test_multiply_random());
    true
}

fn test_multiply_by_0() -> bool {

    //a = 2^255 - 21
    let a = Element{ 
        l0: 2251799813685227, 
        l1: 2251799813685247, 
        l2: 2251799813685247,
        l3: 2251799813685247,
        l4: 2251799813685247 
    };
    let res: Element = multiply(a, zero);
    res_equals(res, zero);
    true
}

fn test_multiply_1_by_1() -> bool {
    let res: Element = multiply(one, one);
    res_equals(res, one);

    true
}

fn test_multiply_by_1_small() -> bool {

    let a = Element{ 
        l0: 10, 
        l1: 11, 
        l2: 12,
        l3: 13,
        l4: 14
    };
    let res: Element = multiply(a, one);
    res_equals(res, a);
    true
}

fn test_multiply_by_1_large() -> bool {

    //a = 2^255 - 21
    let a = Element{ 
        l0: 2251799813685227, 
        l1: 2251799813685247, 
        l2: 2251799813685247,
        l3: 2251799813685247,
        l4: 2251799813685247
    };
    let res: Element = multiply(a, one);
    res_equals(res, a);
    true
}

fn test_multiply_small_elms() -> bool {

/*
10 +
11 * 2^51 +
12 * 2^102 +
13 * 2^153 +
14 * 2^204
=
359954121914013970155159550104308900255525248390881418617552906
*/
    let a = Element{ 
        l0: 10, 
        l1: 11, 
        l2: 12,
        l3: 13,
        l4: 14
    };
/*
2 +
3 * 2^51 +
4 * 2^102 +
5 * 2^153 +
6 * 2^204
=
154266052248863123541936069103167134583173917060132914191138818
*/
    let b = Element{ 
        l0: 2, 
        l1: 3, 
        l2: 4,
        l3: 5,
        l4: 6
    };
    let res: Element = multiply(a, b);

    // = 5913532002873104218298081466563921672602110506934768320078942312
    // = [4200, 3719, 2909, 1752, 230]
    res_equals(res, Element {
        l0: 4200,
        l1: 3719,
        l2: 2909,
        l3: 1752,
        l4: 230
    });
    true
}

fn test_multiply_small_elms_2() -> bool {

/*
10 +
11 * 2^51 +
12 * 2^102 +
1292655137982008 * 2^153 +
14 * 2^204
=
374713634419208422705277081530098872100895088375962880689831946
*/
    let a = Element{ 
        l0: 10, 
        l1: 11, 
        l2: 12,
        l3: 1292655137982008,
        l4: 14
    };
/*
2 +
3 * 2^51 +
4 * 2^102 +
5 * 2^153 +
6 * 2^204
=
154266052248863123541936069103167134583173917060132914191138818
*/
    let b = Element{ 
        l0: 2, 
        l1: 3, 
        l2: 4,
        l3: 5,
        l4: 6
    };
    let res: Element = multiply(a, b);

//41810357909193713957696946830561922437378062290049323977762016618127807079743
//[1414398498170175, 1205048169289895, 995697840409273, 333510462280559, 1626165600260968]
    res_equals(res, Element {
        l0: 1414398498170175,
        l1: 1205048169289895,
        l2: 995697840409273,
        l3: 333510462280559,
        l4: 1626165600260968
    });
    true
}

fn test_multiply_small_elms_3() -> bool {

/*
1292655137982008 +
1303372017735434 * 2^51 +
595911506101250 * 2^102 +
601879629470779 * 2^153 +
50591579140481 * 2^204
=
1300760531839662334344262085631565818852980666446405835776058138544728770104
*/
    let a = Element {
        l0: 1292655137982008,
        l1: 1303372017735434,
        l2: 595911506101250,
        l3: 601879629470779,
        l4: 50591579140481
    };
/*
2 +
3 * 2^51 +
4 * 2^102 +
5 * 2^153 +
6 * 2^204
=
154266052248863123541936069103167134583173917060132914191138818
*/
    let b = Element{ 
        l0: 2, 
        l1: 3, 
        l2: 4,
        l3: 5,
        l4: 6
    };
    let res: Element = multiply(a, b);

//14111756534184466847966592306453182667710228607558444947423180242606813803383
//[1954506281775991, 334157138245186, 376444288997219, 169499236944723, 548860478185542]    res_equals(res, Element {
    res_equals(res, Element {
        l0: 1954506281775991,
        l1: 334157138245186,
        l2: 376444288997219,
        l3: 169499236944723,
        l4: 548860478185542
    });
    true
}

fn test_multiply_elms_4() -> bool {

/*
1292655137982008 +
1303372017735434 * 2^51 +
595911506101250 * 2^102 +
601879629470779 * 2^153 +
50591579140481 * 2^204
=
1300760531839662334344262085631565818852980666446405835776058138544728770104
*/
    let a = Element {
        l0: 1292655137982008,
        l1: 1303372017735434,
        l2: 595911506101250,
        l3: 601879629470779,
        l4: 50591579140481
    };
/*
1360902863141127 +
807899991388824 * 2^51 +
335483569739384 * 2^102 +
293961277766182 * 2^153 +
137209507300112 * 2^204
=
3527794837033309378261417350654351403080646879795459845564282655359926745351
*/
    let b = Element {
        l0: 1360902863141127,
        l1: 807899991388824,
        l2: 335483569739384,
        l3: 293961277766182,
        l4: 137209507300112
    };
    let res: Element = multiply(a, b);

//26419211797770492947925431317169526880133696901606348938375383866077151145114
//[896638975913114, 1000789340506524, 355992668009873, 806477788321681, 1027544741541094]
    res_equals(res, Element {
        l0: 896638975913114,
        l1: 1000789340506524,
        l2: 355992668009873,
        l3: 806477788321681,
        l4: 1027544741541094
    });
    true
}

/*
fn test_multiply_random() -> bool {
    /*
    a = random({2^251}) = 1300760531839662334344262085631565818852980666446405835776058138544728770104
                        = [1292655137982008, 1303372017735434, 595911506101250, 601879629470779, 50591579140481]
                        = Element {
                        1292655137982008,
                        1303372017735434,
                        595911506101250,
                        601879629470779,
                        50591579140481
                        }

    b = random({2^251}) = 3527794837033309378261417350654351403080646879795459845564282655359926745351
                        = [1360902863141127, 807899991388824, 335483569739384, 293961277766182, 137209507300112]
                        = Element {
                        1360902863141127,
                        807899991388824,
                        335483569739384,
                        293961277766182,
                        137209507300112
                        }

    ab mod p            = 26419211797770492947925431317169526880133696901606348938375383866077151145114
                        = [896638975913114, 1000789340506524, 355992668009873, 806477788321681, 1027544741541094]

    */
    
    let a = Element {
        l0: 1292655137982008,
        l1: 1303372017735434,
        l2: 595911506101250,
        l3: 601879629470779,
        l4: 50591579140481
    };

    let b = Element {
        l0: 1360902863141127,
        l1: 807899991388824,
        l2: 335483569739384,
        l3: 293961277766182,
        l4: 137209507300112
    };

    let ab = Element {
        l0: 896638975913114,
        l1: 1000789340506524,
        l2: 355992668009873,
        l3: 806477788321681,
        l4: 1027544741541094
    };


    let res: Element = multiply(a, b);
    // print_el(res);
    res_equals(res, ab);
    true
}
*/